  



  #### ANSIBLE INSTALLATION

  https://shadow-soft.com/turbo-charge-your-ansible/

  STEP  1 : Update the servers  -   yum install epel-release ; yum update repolist  ; yum update ; yum install ansible ; ansible --version
  sudo yum list installed | grep python  ---  > To check the installed python packages

  STEP 2 : Create ansible user with sshkeygen & copy to remote hosts. Then give sudo rights with NOPASSWD.

  To List hosts : 

  root    ALL=(ALL)       ALL
test ALL=(ALL)  ALL
## Allows members of the 'sys' group to run networking, software, 
## service management apps and more.
# %sys ALL = NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS
## Allows people in group wheel to run all commands
%wheel  ALL=(ALL)       ALL
test ALL=(ALL)  ALL
## Same thing without a password
# %wheel        ALL=(ALL)       NOPASSWD: ALL
 sudo   ALL=(ALL:ALL)   NOPASSWD: ALL



 [test@vijaythilak1c playbooks]$ ansible all --list-hosts
  hosts (4):
    vijaythilak4c.mylabserver.com
    localhost
    vijaythilak2c.mylabserver.com
    vijaythilak3c.mylabserver.com
  

  ### ANSIBLE COMMANDS:

ansible   -b  -m yum -a 'pkg=elinks state=installed update_cache=true use_backend=yum' vijaythilak4c.mylabserver.com -K

-b = become 
-K = will ask sudo passwd
-k = will ask ssh passwd




Practice Exercise:

LAB SETUP :

  localhost
  apacheweb - 2
  appserver - 1

Lynx server 
--- # lync installation
- hosts: appserver
  tasks:
  - name: Install Lynx on App Servers
    yum: pkg=lync state=installed update_cache=true use_backend=yum


------
1.Variable Inclusion:




-------
2.Target Section: In this section, will learn Targeting hosts & target method - targetsection.yml 

--- # My First YAML playbook for Ansible
- hosts: apacheweb
  user: test
  become_method: sudo 
  connection: ssh
  gather_facts: no 


[test@vijaythilak1c playbooks]$ ansible-playbook targetsection.yml 

PLAY [apacheweb] *****************************************************************************************************************************
PLAY RECAP ***********************************************************************************************************************************

  
-------
3.Variable Section: This section, will learn how to add and use variables in playbooks. First need to create  directory and file name 'conf' -->  copyright.yml & webdefaults.yml. Now we are going to use 3 variables one local variable & 2 external variables

copyright.yml
---
message: copyright 2019 by Linux Academy
author: Linux Academy

webdefaults.yml
---
apache_version: 2.6
apache_mod_req: mod_ssl

then 

--- # My First YAML playbook for Ansible
- hosts: apacheweb
  user: test
  become_method: sudo 
  connection: ssh
  gather_facts: no 
  vars:
    playbook_version: 0.1b
  vars_files:
    - conf/copyright.yml
    - conf/webdefaults.yml
  vars_prompt:
      - name: web_domain
        prompt: web domain


[test@vijaythilak1c playbooks]$ ansible-playbook variablesection.yml 
[WARNING]: log file at /var/log/ansible.log is not writeable and we cannot create it, aborting
web domain: 
PLAY [apacheweb] ***********************************************************************************************************************************
PLAY RECAP *****************************************************************************************************************************************


-------
4.Task Section: What we are going to do. 


--- # My First YAML playbook for Ansible
- hosts: apacheweb
  user: test
  become_method: sudo 
  connection: ssh
  gather_facts: no 
  vars:
    playbook_version: 0.1b
  vars_files:
    - conf/copyright.yml
    - conf/webdefaults.yml
  vars_prompt:
      - name: web_domain
        prompt: web domain
  tasks:
    -  name: Install Lynx Web Browser
       action: yum name=lynx state=installed
    -  name: Check for Telnet Client
       action: yum name=Telnet state=absent

  test@vijaythilak1c playbooks]$ ansible-playbook -s firstplaybook.yml 
web domain: 
PLAY [apacheweb] *****************************************************************************************************************************
TASK [Install Lynx Web Browser] **************************************************************************************************************
changed: [vijaythilak3c.mylabserver.com]
changed: [vijaythilak2c.mylabserver.com]
TASK [Check for Telnet Client] ***************************************************************************************************************
ok: [vijaythilak3c.mylabserver.com]
ok: [vijaythilak2c.mylabserver.com]
PLAY RECAP ***********************************************************************************************************************************
vijaythilak2c.mylabserver.com : ok=2    changed=1    unreachable=0    failed=0   
vijaythilak3c.mylabserver.com : ok=2    changed=1    unreachable=0    failed=0   


--------
5.Handler Section: this section comprises two pieces 1) notify what happens to the code & 2) affectivelty will execute other set of tasks

--- # My First YAML playbook for Ansible
- hosts: apacheweb
  user: test
  become_method: sudo 
  connection: ssh
  gather_facts: no 
  vars:
    playbook_version: 0.1b
  vars_files:
    - conf/copyright.yml
    - conf/webdefaults.yml
  vars_prompt:
      - name: web_domain
        prompt: web domain
  tasks:
    - name: Install webserver 
      action: yum name=httpd state=installed
      notify:  Restarting httpd
  handlers:
    - name: Restart the apacheweb server
      action: service name=httpd state=restarted



--------
6.Outlining your playbook (PART 1): Create a basic outline of your playbook in text editor


mkdir outline
#create a file name webserver using vim
- webservers
- test users
- sudo rights
- date/time stamp for when the playbook start
- install the apacheweb server
- start the web service
- verify the web server is running
- install client software
  - Telnet
  - lynx
- log all the packages install on the system
- date/time stamp for when the playbook end




--------
7.Create a Playbook from Our Outline (PART 2): Using outline to create a playbook

--- # Outline to Playbook Translation

- hosts: apacheweb
  user: test
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: no
  tasks:
  - name: date/time stamp for when the playbook start
    raw: /usr/bin/date > /home/test/playbook_start.log
  - name: install the apacheweb server
    yum: pkg=httpd state=latest
  - name: start the web service
    service: name=httpd state=restarted
  - name: verify the web server is running
    command: systemctl status httpd
    register: result
  - debug: var=result
  - name: install client software - telnet
    yum: pkg=telnet state=latest
  - name: install client software - lynx
    yum: pkg=lynx state=latest
  - name: log all the packages install on the system
    raw: yum list installed > /home/test/installed.log
  - name: date/time stamp for when the playbook end
    raw: /usr/bin/date > /home/test/playbook_end.log


---------
8.Optimizing Your Playbook: In this section we are removing 'raw' module and use 'command' module to get output on the screen

 --- # Outline to Playbook Translation

- hosts: apacheweb
  user: test
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: no
  tasks:
  - name: date/time stamp for when the playbook start
    command: /usr/bin/date
    register: timestamp_start
  - debug: var=timestamp_start                                    #raw: /usr/bin/date > /home/test/playbook_start.log
  - name: install the apacheweb server
    yum: pkg=httpd state=latest
    notify: start HTTPD 
  - name: install client software - telnet
    yum: pkg=telnet state=latest
  - name: install client software - lynx
    yum: pkg=lynx state=latest
  - name: log all the packages install on the system
    command: yum list installed                                  #raw: yum list installed > /home/test/installed.log
    register: installed_result
  - debug: var=installed_result
  - name: date/time stamp for when the playbook end
    command: /usr/bin/date                                       #raw: /usr/bin/date > /home/test/playbook_end.log
    register: timestamp_end
  - debug: var=timestamp_end
  handlers: 
  - name: start HTTPD
    service: name=httpd state=restarted
  - name: verify the web server is running
    command: systemctl status httpd
    register: result
  - debug: var=result

https://linuxacademy.com/community/posts/show/topic/7761-ansible-restart-web-service-problem-with-check




---------
9.Taking Our Playbook for a Dry Run: We can use the dry run to check whether the pkg is already installed or not. It's useful while creating a complex playbook.
  
  ansible-playbook any_playbook.yml --check      #webserver.yml - 'any playbook'




---------
10. Asychronous Polling: Running opertions in parallel 

# Large number of machines or in a more constrained environment you may have to lower max fork value and launch things asynchronously

Start job across required machines, using max forks and poll for completion.


--- # My First YAML Playbook for Ansible
- hosts: all
  user: test
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: no
  vars:
    playbook_version: 0.1b
  vars_files:
    - conf/copyright.yml
    - conf/webdefaults.yml
  vars_prompt:
    - name: web_domain
      prompt: web domain
  tasks:
    - name: Install Apache Web Server
      action: yum name=httpd state=installed # see when the commands completed, run asynchronously - async runs the job in parallel and value is the max time ansible will wait for the cmd to complete in miliseconds
      async: 300                            # poll how often to check if command was completed
      poll: 3 
      notify: Restart HTTPD
  handlers:
    - name: Restart HTTPD
      action: service name=httpd state=restarted


[ starts the job in each host and polls over the 300 seconds waiting for the cmds' to finish ] 

{ If piped to a file we could see time frames and view their concurrent processes } 

https://docs.ansible.com/ansible/latest/user_guide/playbooks_async.html

https://shadow-soft.com/turbo-charge-your-ansible/


----------

11.Simple Variable Substitution: Here we are Substituting the variable in two methods;  
 

 "conf/webdefaults" inside the file  --- pkg_lynx: lynx


--- # My First YAML Playbook for Ansible
- hosts: all
  user: test
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: no
  vars:
    playbook_version: 0.1b
  vars_files:
    - conf/copyright.yml
    - conf/webdefaults.yml
  vars_prompt:
    - name: web_domain
      prompt: web domain
  tasks:
    - name: Install Apache Web Server
      action: yum name=httpd state=latest # see when the commands completed, run asynchronously - async runs the job in parallel and value is the max time ansible will wait for the cmd to complete in miliseconds
    - name: Install the lynx web Browser
      action: yum name={{pkg_lynx}} state=latest
      notify: Restart HTTPD
  handlers:
    - name: Restart HTTPD
      action: service name=httpd state=restarted


=== 2.METHOD ===

--- # My First YAML Playbook for Ansible
- hosts: all
  user: test
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: no
  vars:
    playbook_version: 0.1b
  vars_files:
    - conf/copyright.yml
    - conf/webdefaults.yml
  vars_prompt:
    - name: pkg_name
      prompt: Install Which Package ?
  tasks:
    - name: Install Apache Web Server
      action: yum name=httpd state=latest # see when the commands completed, run asynchronously - async runs the job in parallel and value is the max time ansible will wait for the cmd to complete in miliseconds
    - name: Install the lynx web Browser  # it might be Pkg_name
      action: yum name={{pkg_name}} state=latest
      notify: Restart HTTPD
  handlers:
    - name: Restart HTTPD
      action: service name=httpd state=restarted
    



----------

12.Lookups:  Lookup isn't a module or section in playbook. Infact ansilble  lookup values, delimite file,or  environment, new version of  files,etc


Create a lookup.csv file:

  Bruce Wayne,Batman,Human
  Clark Kent,Superman,Alien
  Diana Prince,Wonder Woman,Deity
  Wally West,The Flash,Human

create a lookup.yml file

--- #LOOKUP PLAYBOOK EXAMPLE

- hosts: apacheweb
  user: test
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: no
  tasks: 
    - debug: msg="Lookup the superhero for BRUCE WAYNE {{ lookup('csvfile','Wayne file=lookup.csv delimiter=,  col=1 default=NOMATCH')}}"

https://linuxacademy.com/cp/socialize/index/type/community_post/id/14530




---------

13.RunOnce: It only run on the first server on the group (EXAMPLE - all)

--- #RUNONCE PLAYBOOK EXAMPLE

- hosts: all
  user: test
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: no
  tasks: 
    - name: Run the uptime command on all hosts and log it
      raw:  /usr/bin/uptime >> /home/test/uptime.log
    - name: List the /var directory and log it 
      raw: ls -la /var >> /home/test/dir.list
      run_once: true





----------

14.Local Actions: How to execute playbooks locally

--- # Local Action PLAYBOOK

- hosts: 127.0.0.1
  connection: local
  tasks:
    - name: Install Telnet Client
      yum: pkg=telnet state=latest  or action: yum name=telnet state=latest




----------

15.Loops: Often you’ll want to do many things in one task, such as create a lot of users, install a lot of packages, or repeat a polling step until a certain result is reached.


 
 TO ADD USERS :-

--- # LOOP PLAYBOOK EXAMPLE
- hosts: apacheweb
  user: test 
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: no
  tasks:
    - name: Adding users
      user:
         name: "{{ item }}"
         state: present
         group: "wheel"
      loop:
         - user1
         - user2
         - user3
 

 TO REMOVE USERS :-

--- # LOOP PLAYBOOK EXAMPLE
- hosts: apacheweb
  user: test 
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: no
  tasks:
    - name: removing users
      user:
         name: "{{ item }}"
         state: absent
         group: "wheel"
      loop:
         - user1
         - user2
         - user3




---------

16.Conditionals: are like normall scripting, Conditionals in ansible is designated with keyword  'When' . you indicate an action  and at the end when action should run and what action takes place.


--- # WHEN Playbook Example

- hosts: apacheweb
  user: test
  become: yes
  become_method: sudo
  connection: ssh
  vars:
    playbook_type: conditional Example
  vars_files:
    - conf/copyright.yml
    - conf/webdefaults.yml
  tasks:
    - name: Install Apache Appropriate to the Distribution  Type (Debian/Ubuntu)
      command: apt-get install apache2 -y
      when: ansible_os_family == "Debian"
    - name: Install Apache Appropriate to the Distribution  Type (Redhat/CentOS)
      command: yum install httpd -y
      when: ansible_os_family == "RedHat"




---------

17.Until: We want to run particular until changes, we can  limit the no of times we retry that command. 

--- # UNTIL playbook Example

- hosts: apacheweb
  user: test
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: no
  tasks: 
    - name: Installing Apache Web Server
      yum: pkg=httpd state=latest
    - name: verify Service status
      shell: systemctl status httpd
      register: result
      until: result.stdout.find("active (running)") != -1
      retries: 5
      delay: 5
    - debug: var=result



----------

18.Notify:  (handlers - this section comprises two pieces 1) notify what happens to the code & 2) affectivelty will execute other set of tasks).

Here we are going to install apache, it starts service automatically. But we are going to start the service by notifcation.


--- # NOTIFY Playbook Example

- hosts: apacheweb
  user: test
  become: yes
  become_method: sudo 
  connection: ssh
  gather_facts: no
  vars:
    playbook_version: 0.1b
  vars_files:
    - conf/copyright.yml
    - conf/webdefaults.yml
  vars_prompt:
      - name: web_domain
        prompt: web domain
  tasks:
    - name: Install Apache Web Server
      action: yum pkg=httpd state=latest
      notify: Restart HTTPD
  handlers:
    - name: Restart HTTPD       ## Notify & Handlers name should be same
      action: service  name=httpd state=restarted



---------

19.Vault: used to encrypt our yaml files. we are not going to create any yml configuration file for a playbooks here. We are going to create a file to account management.


---------  Usage: ansible-vault [create|decrypt|edit|encrypt|encrypt_string|rekey|view] [options] [vaultfile.yml]

COMMANDS:

To Create encrypted yaml file :

    - ansible-vault create filename.yml

To Decrpt : 
    - ansible-vault decrypt filename.yml

To Encrypt:
    - ansible-vault encrypt filename.yml

To Edit:
    - ansible-vault edit filename.yml

To Rekey| View: 

    - ansible-vault rekey  filename.yml
    - ansible-vault  view  filename.yml





----------


20. Interactive Playbook: vars_prompt- Get input from commandline from the user. How we might use this particular function within our playbook, but its simple designed to look at how it works, but we build more complex playbook.more dynamically.()



--- # PROMPT FOR USER PACKAGE EXAMPLE

- hosts: apacheweb
  user: test
  become: yes
  become_method: sudo 
  connection: ssh 
  gather_facts: no
  vars: 
    playbook_version: 0.01b
  vars_prompt: 
    - name: pkgtoinstall
      prompt: Install Which Package?
      default: telnet
      private: no             # private : yes - it will no display 
  tasks:
    - name: Install the indicated packages
      yum: pkg={{  pkgtoinstall  }} state=latest





------------

21.Basic Include Statements: here we are going to create a file 'plays' and create a plays - will install telnet and lynx. Here we aren't going to create hosts,user etc. bcoz its play not playbook.

 For EXAMPLE: create a directory -> mkdir plays; cd plays; vim packages.yml

 - name: Install the telnet client
   yum: pkg=telnet state=latest
 - name: Install the lynx
   yum: pkg=lynx state=latest


Now create a Master playbook: 

 --- # FULL INCLUDE TASKS EXAMPLE
 
 - hosts: apacheweb
   user: test
   become: yes
   become_method: sudo
   connection: ssh
   gather_facts: no
   tasks: 
     - include: plays/packages.yml
     - name: Verify the telnet packages is installed
       raw: yum list installed| grep telnet > /home/test/pkgs.log







---------------

22.Tags: It gives as the ability to assign the name for particular part to our playbook and we can run the particular part only, if we need.


--- # TAG FUNCTIONALITY EXAMPLE

- hosts: apacheweb
  user: test
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: no
  tasks: 
    - name: Instalt the telnet and  lyn packages
      yum: pkg={{item}} state=latest
      with_items:
        - telnet
        - lynx
      tags:
        - packages
    - name: verify that telnet was installed
      raw: yum list installed| grep telnet > /home/test/pkg.log
      tags:
        - verification


ansible-playbook tags.yml --tags "verification"





